def configure(conf):
    pass

def build(bld):
    # FreeRTOS vendor code
    use_timers = False
    if bld.env.MICRO_FAMILY == 'STM32F2':
        freertos_port_name = 'ARM_CM3'
    elif bld.env.MICRO_FAMILY == 'STM32F4':
        freertos_port_name = 'ARM_CM4F'
    elif bld.env.MICRO_FAMILY == 'STM32F7':
        freertos_port_name = 'ARM_CM4F' # fix to CM7 when we have it
    elif bld.env.MICRO_FAMILY == 'NRF52840':
        freertos_port_name = 'ARM_CM4F'
        use_timers = True
    else:
        bld.fatal('Unrecognized env.MICRO_FAMILY value %r' %
                  bld.env.MICRO_FAMILY)

    freertos_includes = [
        '.',
        'FreeRTOS-Kernel/FreeRTOS/Source/include',
        f'FreeRTOS-Kernel/FreeRTOS/Source/portable/GCC/{freertos_port_name}'
    ]

    freertos_source_paths = [
        'FreeRTOS-Kernel/FreeRTOS/Source',
        f'FreeRTOS-Kernel/FreeRTOS/Source/portable/GCC/{freertos_port_name}'
    ]
    freertos_sources = sum([bld.path.ant_glob(d + '/*.c')
                           for d in freertos_source_paths], [])

    freertos_defines = [f'FREERTOS_USE_TIMERS={int(use_timers)}']

    bld(export_includes=freertos_includes,
        export_defines=freertos_defines,
        name='freertos_includes')

    bld.stlib(source=freertos_sources,
              target='freertos',
              use=['pblibc',
                   'fw_includes',
                   'freertos_includes'],
              export_defines='GCC_{}'.format(freertos_port_name))

# vim:filetype=python



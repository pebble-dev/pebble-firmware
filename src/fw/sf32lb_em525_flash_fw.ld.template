MEMORY
{
    KERNEL_RAM  (xrw) : ORIGIN = @KERNEL_RAM_ADDR@, LENGTH = @KERNEL_RAM_SIZE@
    WORKER_RAM (xrw)  : ORIGIN = @WORKER_RAM_ADDR@, LENGTH = @WORKER_RAM_SIZE@
    APP_RAM (xrw)     : ORIGIN = @APP_RAM_ADDR@,    LENGTH = @APP_RAM_SIZE@

    /* Bootloader now ends at 0x8008000, once we're sure we won't break */
    /* current watches, we should take advantage of this free space. */
    FLASH (rx) : ORIGIN = @FW_FLASH_ORIGIN@, LENGTH = @FW_FLASH_LENGTH@
}

__FLASH_start__ = @FLASH_ORIGIN@;
__FLASH_size__ = @FLASH_SIZE@;

REGION_ALIAS("REGION_ISR_STACK", KERNEL_RAM);
REGION_ALIAS("REGION_KERNEL_STACKS", KERNEL_RAM);
REGION_ALIAS("REGION_KERNEL_HEAP", KERNEL_RAM);


SECTIONS
{
    .isr_vector : {
        ASSERT(. == ORIGIN(FLASH), "Error: Vector table is offset from the start of the FLASH region");
        PROVIDE(__ISR_VECTOR_TABLE__ = .);
        KEEP(*(.isr_vector))            /* Startup code */
    } >FLASH

    .retm_ro : {
        . = ALIGN(4);
        __retm_ro_start = .;
        * (.*l1_ret_text_*)
        * (.*l1_ret_rodata_*)

        *flash_table.*.o       (.text* .rodata*) 
        *bf0_hal_mpi.*.o       (.text* .rodata*)
        *bf0_hal_mpi_ex.*.o    (.text* .rodata*)
        *bf0_hal_mpi_psram.*.o (.text* .rodata*)
        */flash.*.o             (.text* .rodata*)

        *bf0_hal_rcc.*.o      (.text* .rodata*)

        *.o                 (.text.SystemPowerOnModeGet)

        *bf0_hal_gpio.*.o     (.text* .rodata*)

        *bf0_hal_hpaon.*.o    (.text* .rodata*)
        *bf0_hal.*.o          (.text.HAL_Init)
        *.o                 (.text.HAL_Delay_us)
        *.o                 (.text.HAL_Delay_us_)
        *.o                 (.text.HAL_Delay_us2_)
        *.o                 (.text.HAL_MspInit)
        *.o                 (.text.HAL_Delay)
        *bf0_hal_pinmux.*.o   (.text* .rodata*)
        *bf0_pin_const.*.o    (.text* .rodata*)
        *.o                 (.text.rt_memset)
        *rt_memclr*.*.o       (.text*)
        *memset*.*.o          (.text*)      
        *memcpy*.*.o          (.text*)  

        . = ALIGN(4);
        __retm_ro_end = .;
    } >KERNEL_RAM AT>FLASH
    __retm_ro_load_start = LOADADDR(.retm_ro);
}

